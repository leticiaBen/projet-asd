#include <iostream>
#include <vector>
#include <fstream>
#using namespace std;

typedef struct node{
string word;
vector <int> occur;
struct node *left;
struct node *right
} node;

//----------------------fonction qui recherche si un mot existe deja dans l'arbre------------------------------
-
bool trouver(string s , node *tr , int num) {
if(tr == NULL)
return false
if(s== tr -> word){
occur.push_back(num);
return true;
}                                       //qd le mot existe on ajoute le numero de la phrase dont il figure dzns le tableau du mot
else {
if(s< tr -> word)
return trouver(s , tr -> left);
else return trouver(s, tr-> right);
}
}

//-----------------------------------insertion-----------------------------------

void insertion(node *&tr, string& s, int num)
{
    if (tr == NULL)
    {
        tr = new node; //allocation
        tr->word = s;
        tr->occur.push_back(num);
        tr->left = NULL;
        tr->right = NULL;
    }
    else
    {
        if(trouver(tr, s, num))
            return;
        else
        {
            if(s == ".") //ne pas considere le point comme un string
                return;
            else
            {
                if (s < tr->word)
                    insertion(tr->left, s, num);
                else
                    insertion(tr->right, s, num);
            }
        }
    }
}

//si le mot existe dans l'arbre on ajoute le numero de la phrase dans le tableau 
//s'il n existe pas on insere le mot dans l arbre et on ajoute le numero de la phrase dans le tableau du mot 

if (trouver(s,tr,num)==true ) //retourne rien
else return //FONCTION DE L'INSERTION 

-----------------------------------------------------------------------------------------------------------------------------------------------------
int main{

int num_phrase (1) ; string mot ; node *arbre ; fstream fichier{"projet asd.txt"};

while(!fichier.eof()) {
fichier>>mot;
insertion(tr , s ,num);
if(mot== ".") 
num_phrase++

//l'intersection
 
 //leticia lina . amel ikram
 // l'utilisateur: lina ikram
 
 //intersection entre le vecteur(de l'arbre) de lina et ikram (return un 0 dans ce cas)
}




