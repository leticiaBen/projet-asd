
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//---------------------------------------------------------------------les structures------------------------------------------------------------------------------
//------------------------------------------------------ la structure de la liste des positions-------------------------------------------------------------------- 

typedef struct maillon {
	int info; 
	struct maillon *suiv ; 
}liste ;
//------------------------------------------------------ la structure de l'arbre-------------------------------------------------------------------- 

typedef struct node{
   char mot [100] ;
   struct node *left;
   struct node *right; 
   liste index ; 
} arbre;

//-----------------------------------------------------le cas ou le mot n'existe pas dans l'arbre--------------------------------------------------------------------
//--------------------------------------------------
//------------------------------------------------------------allocation d'un noued ---------------------------------------------------------------------------------
//--------------------------------------------------
arbre *allouer(char *word  ){
	arbre *nouv= (arbre*)malloc(sizeof(arbre)); 
	
strcpy( nouv->mot , word); 
nouv->left = NULL; 
nouv->right = NULL; 
return nouv ; 
} 
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------insertion--------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------

arbre * insertion (arbre *R , char *mot){
	if (R==NULL){
	  R =  allouer(mot); // le cas ou l'arbre est NULL
	}else {
	   if (strlen(R->mot) > strlen(mot)) {
		// --------------taille(R->mot) > taille (mot ) => fils droite --------
			R->right = insertion (R->right,mot); 
		}else {
		// -------------taille(R->mot) < = taille (mot ) => fils droite-------
		        R->left  = insertion (R->left,mot); }
	       return R ; }
	}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------affichage----------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------
void prefixe (arbre *R){
	if (R==NULL){
		return ; 
	}else {
		printf(" le mot est : %s \n",R->mot); 
		prefixe(R->left); 
		prefixe(R->right); 
	}
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------main part ---------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------

main(){
 //--------------------------------- skip this part for this moment -------------------------------
 //cette partie est fait pour la fonction principale (li fiha gae les fonctions) 
 /*
 FILE *F ; arbre *R; 
 F =fopen("TPASD.txt","r"); 
 
 //-----tester si le fichier est bien ouvert 
 if(F ==NULL) {
 	printf("not open"); 
 }else{
 R= NULL ;
 char mot [10] ; 
 while(!feof(F)){
 fscanf(F,"%s",mot); 
 R= insertion (R , mot);
  
 }
 prefixe (R);
 }
  

 fclose(F);  */
 //--------------------------------------------------------------------------------------------------------------------------------------------------------
 
 
 
 //-------------------------------------------test-----------------------------------------------------------------------
arbre *R; 
R= NULL ; 
  R= insertion (R , "hiworld");
  R= insertion (R , "done ");
  R= insertion (R , "five");
  R= insertion (R , "lllllllllllllllllllllllll");
  prefixe (R);
  
}

