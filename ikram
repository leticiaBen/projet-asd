#include <stdio.h>
#include <stdlib.h>
#include<string.h>
#include <stdbool.h>

// la structure de la liste des positions
typedef struct maillon {
	int info;
	struct maillon *suiv ;
}maillon ;
// la structure de l'arbre

typedef struct node{
char word [20];
maillon *index ; // ptr sur maillon
struct node *left;
struct node *right;
} node;


//-------------------------------------------------------------------------------------------------------------------------------
//----------------------fonction qui recherche si un mot existe deja dans l'arbre--------------------------------------------------
//---------------------------------------------------------------------------------------------------------------------------------


  bool trouver(char *mot, node *tr ) {
   if(tr == NULL){
   //------------------- le cas ou l'arbre est vide----------
    return false ;
	}
       //------------ le cas ou le mot existe deja dans l'arbre-------------
    if(strcmp(mot ,tr->word)== 0){
            // mot = tr->word

      return true;
    }else {
	// le cas ou le mot  n'existe pas {la racine } on teste s'il exist dans les noeuds

    if(strlen (mot) <  strlen(tr->word)){

	return trouver(mot,   tr -> left);	// si la taille (mot ) < taille (tr -> word) on cherhche dans le fils gauche
    }else{

    return trouver(mot,tr-> right); // si la taille (mot ) > taille (tr -> word) on cherhche dans le fils droite
}}}


//--------------------------------------------------
//-------------allocation d'un noued liste  ---------------
//--------------------------------------------------

maillon * allouerlist(int cpt ){
    maillon *nouv = (maillon*)malloc(sizeof(maillon));
    nouv->info = cpt ;
    nouv->suiv = NULL;
    return nouv ;
}
//--------------------------------------------------
//-------------inserition d'un noued liste  ---------------
//--------------------------------------------------

      maillon *inslist(maillon* tete , int cpt){

      if (tete==NULL){
        tete =allouerlist(cpt);
        return ;
      }else {
        tete->suiv = inslist (tete->suiv, cpt);
      }

      }
//--------------------------------------------------
//-------------allocation d'un noued arbre ---------------
//--------------------------------------------------
node *allouer(char *word){
	node *nouv= (node*)malloc(sizeof(node));
    strcpy( nouv->word , word);
    nouv->left = NULL;
    nouv->right = NULL;
	nouv->index = NULL;

    return nouv ;
}

//----------------------------------------------------------------------------
//-----------------------------------insertion arbre--------------------------------
//----------------------------------------------------------------------------

node* insertion(node *tr, char *mot, int cpt  ){

 // cpt : cpt de phrases

	//----------le cas ou l'arbre vide---------
    if (tr == NULL) {
    tr = allouer( mot); // allocation
    tr->index = inslist(tr->index,cpt);

	return tr ;
    }else{


        if( trouver (mot , tr )==true){
                // il y pas d'insertion
               tr->index = inslist(tr->index,cpt);
               return tr ;
        }else {
        if (strlen(tr->word) > strlen(mot)){
                // ----------------existe un traitment --------------
                // le cas d'insertion

                tr->right = insertion (tr->right,mot, cpt); // R->mot > mot => fils droite{
		        return tr ;
		       }else {
		 // tr->mot <= mot => fils gauche
            tr->left =	insertion (tr->left,mot,cpt);
            return tr ;
		}}


		}
    }
//----- une foction qui affiche l'arbre et les positions 
void prefixe (node *R){
   int i ; int cpt ;
	if (R==NULL){
		return ;
	}else {
		printf(" le mot  est : %s \n",R->word);
		maillon *ptr ;
		ptr = R->index;
		printf("les positions :\n");
		while(ptr!=NULL){

            printf("%d \n ",ptr->info);
            ptr = ptr->suiv;

		}
		//cpt++;
		prefixe(R->left);
		prefixe(R->right);
	}
}


//si le mot existe dans l'arbre on ajoute le numero de la phrase dans le tableau
//s'il n existe pas on insere le mot dans l arbre et on ajoute le numero de la phrase dans le tableau du mot

/*if (trouver(s,tr,num)==true ) //retourne rien
else return //FONCTION DE L'INSERTION*/

//-----------------------------------------------------------------------------------------------------------------------------------------------------
int main(){


 FILE *F ;
 node *R;
 F =fopen("TPASD.txt","r");

 //-----tester si le fichier est bien ouvert
 if(F ==NULL) {
 	printf("not open");
 	return ;
 }
 R= NULL ;
 char mot [10] ;
 int  cpt =1;
 while(!feof(F)){
 fscanf(F,"%s",mot);
       //le cas ou le mot ='.' alors o fait rien
           if (strcmp(mot ,".")==0){

            cpt++;// num de la phrase
           }else{
            R= insertion (R , mot,cpt);

            }
 }
prefixe (R);

 fclose(F);

  }
